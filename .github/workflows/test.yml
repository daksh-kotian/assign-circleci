name: Build

on:
  push:
    branches:
      - main
  # Optionally enable manual triggering for a specific branch
  # workflow_dispatch:
  #   branches:
      - dev1



     
jobs:
  example_job:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up environment variables
      env:
        MULTI_VARS: ${{ secrets.MULTI_VARS }}
      run: |
        echo "$MULTI_VARS" > multi_vars.json
        VAR1=$(jq -r '.VAR1' multi_vars.json)
        VAR2=$(jq -r '.VAR2' multi_vars.json)
        VAR3=$(jq -r '.VAR3' multi_vars.json)
        echo "VAR1=$VAR1"
        echo "VAR2=$VAR2"
       





# jobs:
#   example-job:
#     runs-on: ubuntu-latest
#     steps:a
#       - name: Get variables from secret
#         run: |
#           # Parse JSON string stored in GitHub Secret
#           VARIABLES=$(echo "${{ secrets.xMY_SECRET }}" | jq -r .)

#           # Extract specific variable
#           VARIABLE_VALUE=$(echo "$VARIABLES" | jq -r '.variable1')
         

#           # Set the extracted variable as an environment variable
#           echo "Variable 1 value: $VARIABLE_VALUE"

# jobs:
#   npm_install_main:
#     name: NPM Install (Main)
#     if: github.ref == 'refs/heads/main'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2dd

#       - name: Install dependencies
#         run: npm install

#       - name: Log message
#         run: echo "NPM Install completed for main branch"

#   npm_install_dev1:
#     name: NPM Install (Dev1)
#     if: github.ref == 'refs/heads/dev1'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Install dependencies
#         run: npm install

#       - name: Log message
#         run: echo "NPM Install completed for dev1 branch"


# name: Build

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     permissions: read-all
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

#       - uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#       # Custom step to check the number of high impact issues
#       - name: Check SonarQube Quality Gate
#         run: |
#           # Get the JSON response from SonarQube API
#           response=$(curl -sS -u "${{ secrets.SONAR_TOKEN }}": "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=your_project_key")
#           # Extract the number of high impact issues
#           high_impact=$(echo "$response" | jq -r '.projectStatus.conditions[] | select(.metricKey == "new_security_rating" and .status == "ERROR") | .actualValue')
#           # Check if the number of high impact issues is greater than 4
#           if [ "$high_impact" -gt 4 ]; then
#             echo "Number of high impact issues is greater than 4. Failing the job."
#             exit 1
#           else
#             echo "Number of high impact issues is within acceptable limits."
#           fi


      
